<?php

/**
 * Implements hook_menu().
 */
function assessment_menu(){
  $items = array();

  $items['assessment/questions'] = array(
    'title' => 'All Questions',
    'description' => 'All Questions',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'assessment_all_questions_title',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function assessment_permission(){
  $perms = array();

  $perms['my custom permission'] = array(
    'title' => '',
    'description' => '',
  );

  return $perms;
}

/**
 * Get titles for questions content type.
 */
function assessment_all_questions_title(){
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'questions')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'DESC')
    ->range(0,10);
  $query->pager();
  $result = $query->execute();

  $output = '';

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach($nids as $nid) {
    $items= array();
    $nodes = entity_metadata_wrapper('node', $nid);
    $title = $nodes->title->value();
    $type = 'ul';
    // The following attributes apply to the list tag (e.g., <ol> or <ul>)
    $attributes = array(
      'id' => 'my-custom-listing',
      'class' => 'custom-class another-custom-class', // a string or indexed (string) array with the classes for the list tag
    );
    foreach($nodes->field_answer->value() as $answer):
      $items[] = array(
        'data' => $answer->field_option_answer[LANGUAGE_NONE][0]['value'],
        // 'id' => $account->uid, // be careful not to add another id attribute on the page that might be the same as one of the uids or your page will not validate
        'class' => array('answers'), // value for 'class' key MUST be an (indexed) array. Using a string value like '2 3 4' produces an error
      );
      // _dbg($answer->field_option_answer[LANGUAGE_NONE][0]['value'],1);
    endforeach;
    // _dbg($nodes->field_answer->value(),1);
    $output .= theme_item_list(array('items' => $items, 'title' => $title, 'type' => $type, 'attributes' => $attributes));
  }
  }
  else {
    $output['status']['#markup'] = t('No results were returned.');
  }
  return $output;
}

/**
* Implements hook_entity_info_alter().
*/
function assessment_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['only_title'] = array(
    'label' => t('Only Title'),
    'custom settings' => TRUE,
  );
}



function _dbg($var,$flag=0) {
  echo '<pre>',var_dump($var),'</pre>';
  if($flag) {
    die();
  }
}
/**
* Implements hook_preprocess_node().
*/
/*function assessment_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'only_title') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__only_title';
  }
}*/
