<?php

/**
 * Implements hook_menu().
 */
function assessment_menu() {
  $items = array();

  $items['assessment/questions'] = array(
    'title' => 'All Questions',
    'description' => 'All Questions',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'assessment_all_questions',
    'access arguments' => array('access content'),
    );

  return $items;
}

/**
 * Implements hook_permission().
 */
function assessment_permission() {
  $perms = array();

  $perms['my custom permission'] = array(
    'title' => '',
    'description' => '',
    );

  return $perms;
}

/**
 * Get titles for questions content type.
 */
function assessment_all_questions() {
  $query = new EntityFieldQuery();
  $query
  ->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'questions')
  ->propertyCondition('status', 1)
  ->propertyOrderBy('created', 'DESC')
  ->range(0,10);
  $query->pager();
  $result = $query->execute();

  $output = '';

  if (isset($result['node'])) {

    $output .= '<div class="flexslider"><ul class="slides">';

    $nids = array_keys($result['node']);
    foreach($nids as $nid) {
      $items= array();
      $node = entity_metadata_wrapper('node', $nid);
      $title = $node->label();
      $type = 'ul';
      // The following attributes apply to the list tag (e.g., <ol> or <ul>)
      $attributes = array(
        'id' => 'answers',
        'class' => 'answers answers-list', // a string or indexed (string) array with the classes for the list tag
      );
      foreach($node->field_answer->value() as $answer):
        $answer_option = entity_metadata_wrapper('field_collection_item', $answer);
        $items[] = array(
          'data' => $answer_option->field_option_answer->value(),
          'class' => array('answer'), // value for 'class' key MUST be an (indexed) array. Using a string value like '2 3 4' produces an error
        );
      endforeach;
      $output .= assessment_item_list(array('items' => $items, 'title' => $title, 'type' => $type, 'attributes' => array('class' => array('answers', 'answers-list')), 'wrapper_attributes' => array('id' => 'questions-answers-wrapper', 'class' => array('questions-answers-wrapper'))));
    }

    $output .= '</ul></div>';
  }
  else {
    $output['status']['#markup'] = t('No results were returned.');
  }
  return $output;
}

/**
 * Override theme_list_item() function for wrapper classess.
 */
function assessment_item_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];
  $wrapper_attributes = $variables['wrapper_attributes'];
  if (!isset($wrapper_attributes['class']) ) {
    $wrapper_attributes['class'] = array('item-list');
  }

  // Use drupal attributes function to convert an array into HTML attributes
  $output = '<li' . drupal_attributes($wrapper_attributes) . '>';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }
  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  $output .= '</li>';
  return $output;
}

/**
 * Debug function.
 */
function _dbg($var,$flag=0) {
  echo '<pre>',var_dump($var),'</pre>';
  if($flag) {
    die();
  }
}
